{"ast":null,"code":"export default {\n  name: 'MessageComponent',\n  props: ['isUser', 'text', 'typing', 'timestamp', 'username', 'avatarSrc'],\n  data() {\n    return {\n      textProgress: 0 // Initial progress of the typing animation\n    };\n  },\n  computed: {\n    displayedText() {\n      // Return the substring of text based on the current typing progress\n      return this.text.substring(0, this.textProgress);\n    }\n  },\n  watch: {\n    typing(newValue) {\n      if (newValue) {\n        // Start typing effect when typing is true\n        this.startTypingEffect();\n      }\n    }\n  },\n  methods: {\n    startTypingEffect() {\n      const length = this.text.length;\n      const typingSpeed = 5; // milliseconds per character\n      let currentLength = 0;\n      const interval = setInterval(() => {\n        currentLength++;\n        this.textProgress = currentLength;\n        if (currentLength >= length) {\n          clearInterval(interval); // Stop the interval when the full text is displayed\n        }\n      }, typingSpeed);\n    }\n  },\n  mounted() {\n    if (this.typing) {\n      this.startTypingEffect();\n    }\n  }\n};","map":{"version":3,"names":["name","props","data","textProgress","computed","displayedText","text","substring","watch","typing","newValue","startTypingEffect","methods","length","typingSpeed","currentLength","interval","setInterval","clearInterval","mounted"],"sources":["/Users/buidinhtri/Desktop/FindBud/FinBud-AI-bot/src/components/MessageComponent.vue"],"sourcesContent":["<template>\n  <div>\n    <div :class=\"['message-wrapper', { 'user': isUser, 'bot': !isUser }]\">\n      <img :src=\"avatarSrc\" class=\"avatar\">\n      <div class=\"message-content-wrapper\">\n        <div class=\"username\">{{ username }}</div>\n        <!-- Use displayedText computed property -->\n        <div :class=\"['message-content', { 'typing': typing }]\">{{ displayedText }}</div>\n      </div>\n      <div class=\"timestamp\">{{ timestamp }}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'MessageComponent',\n  props: ['isUser', 'text', 'typing', 'timestamp', 'username', 'avatarSrc'],\n  data() {\n    return {\n      textProgress: 0, // Initial progress of the typing animation\n    };\n  },\n  computed: {\n    displayedText() {\n      // Return the substring of text based on the current typing progress\n      return this.text.substring(0, this.textProgress);\n    },\n  },\n  watch: {\n    typing(newValue) {\n      if (newValue) {\n        // Start typing effect when typing is true\n        this.startTypingEffect();\n      }\n    }\n  },\n  methods: {\n    startTypingEffect() {\n      const length = this.text.length;\n      const typingSpeed = 5; // milliseconds per character\n      let currentLength = 0;\n\n      const interval = setInterval(() => {\n        currentLength++;\n        this.textProgress = currentLength;\n        if (currentLength >= length) {\n          clearInterval(interval); // Stop the interval when the full text is displayed\n        }\n      }, typingSpeed);\n    }\n  },\n  mounted() {\n    if (this.typing) {\n      this.startTypingEffect();\n    }\n  }\n}\n</script>\n\n<style scoped>\n.message-wrapper {\n  display: flex;\n  align-items: flex-end;\n  gap: 10px;\n  margin-bottom: 16px;\n  overflow: hidden;\n  word-wrap: break-word;\n}\n\n.chat-window {\n  height: 80vh;\n  /* Adjusted to 80% of viewport height */\n  border: 1px solid #e0e0e0;\n  background-color: #fff;\n  max-height: 100%;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  overflow-y: auto;\n  /* Enable scrolling if content exceeds window */\n}\n\n.message-content-wrapper {\n  display: inline-flex;\n  flex-direction: column;\n  align-items: flex-start;\n  max-width: 80%;\n  word-wrap: break-word;\n}\n\n.avatar {\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  margin-left: 1%;\n}\n\n.message-content {\n  display: inline-block;\n  padding: 10px;\n  margin: 4px 0;\n  border-radius: 16px;\n  background-color: #007bff;\n  color: #fff;\n  border: 1px solid transparent;\n  text-align: left;\n  white-space: pre-wrap; \n}\n\n@keyframes typing {\n  from {\n    width: 0; /* Use width instead of max-width for a smoother start */\n  }\n  to {\n    width: 100%; /* Adjust to full width of the containing block */\n  }\n}\n\n\n.message-container.is-user .message-content {\n  background-color: #f0f0f0;\n  color: #000;\n}\n</style>\n"],"mappings":"AAeA,eAAe;EACbA,IAAI,EAAE,kBAAkB;EACxBC,KAAK,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,CAAC;EACzEC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,CAAC,CAAE;IACnB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,aAAaA,CAAA,EAAG;MACd;MACA,OAAO,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC,CAAC,EAAE,IAAI,CAACJ,YAAY,CAAC;IAClD;EACF,CAAC;EACDK,KAAK,EAAE;IACLC,MAAMA,CAACC,QAAQ,EAAE;MACf,IAAIA,QAAQ,EAAE;QACZ;QACA,IAAI,CAACC,iBAAiB,CAAC,CAAC;MAC1B;IACF;EACF,CAAC;EACDC,OAAO,EAAE;IACPD,iBAAiBA,CAAA,EAAG;MAClB,MAAME,MAAK,GAAI,IAAI,CAACP,IAAI,CAACO,MAAM;MAC/B,MAAMC,WAAU,GAAI,CAAC,EAAE;MACvB,IAAIC,aAAY,GAAI,CAAC;MAErB,MAAMC,QAAO,GAAIC,WAAW,CAAC,MAAM;QACjCF,aAAa,EAAE;QACf,IAAI,CAACZ,YAAW,GAAIY,aAAa;QACjC,IAAIA,aAAY,IAAKF,MAAM,EAAE;UAC3BK,aAAa,CAACF,QAAQ,CAAC,EAAE;QAC3B;MACF,CAAC,EAAEF,WAAW,CAAC;IACjB;EACF,CAAC;EACDK,OAAOA,CAAA,EAAG;IACR,IAAI,IAAI,CAACV,MAAM,EAAE;MACf,IAAI,CAACE,iBAAiB,CAAC,CAAC;IAC1B;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}