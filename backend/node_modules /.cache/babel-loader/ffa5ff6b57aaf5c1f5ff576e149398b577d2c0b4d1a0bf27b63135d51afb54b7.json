{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ChatHeader from '../components/ChatHeader.vue';\nimport ChatFrame from '../components/ChatFrame.vue';\nimport MessageComponent from '../components/MessageComponent.vue';\nimport UserInput from '../components/UserInput.vue';\nimport { fetchStockPrice } from '@/services/stockServices';\nimport { gptAPICall } from '@/services/gptServices';\nexport default {\n  name: 'ChatView',\n  props: ['threadId'],\n  components: {\n    ChatHeader,\n    ChatFrame,\n    MessageComponent,\n    UserInput\n  },\n  data() {\n    return {\n      newMessage: '',\n      messages: [],\n      userAvatar: require('@/assets/tri.jpeg'),\n      botAvatar: require('@/assets/bot.png'),\n      currentThread: {} // The current selected thread\n    };\n  },\n  watch: {\n    threadId: {\n      immediate: true,\n      handler(newThreadId) {\n        console.log('Received new thread ID:', newThreadId);\n        if (newThreadId != null) {\n          console.log(\"Hello\");\n          this.updateCurrentThread(newThreadId);\n        }\n      }\n    }\n  },\n  computed: {\n    currentChatWindow() {\n      // Dynamic component name based on the selected thread or default chat window\n      return this.currentThread.id ? 'ChatWindow' : 'DefaultChatWindow';\n    }\n  },\n  methods: {\n    clearMessage() {\n      this.newMessage = '';\n    },\n    // sendMessage(newMessage) {\n    //   console.log(\"start sending this.newMessage: \", newMessage)\n    //   this.messages.push({\n    //     text: newMessage.trim(),\n    //     isUser: true,\n    //     typing: true,\n    //     timestamp: new Date().toLocaleTimeString()\n    //   });\n    //   // Simulate a delay for typing effect, then set typing to false\n    //   console.log(\"Updated messages array: \", this.messages);\n\n    //   this.newMessage = '';\n    // },\n\n    updateCurrentThread(newThreadId) {\n      console.log(\"Update current thread function triggered: \", newThreadId);\n      // const thread = this.threads.find(thread => thread.id.toString() === newThreadId);\n      const thread = newThreadId.toString();\n      console.log(thread);\n      if (thread) {\n        this.currentThread = thread;\n        // this.messages = thread.messages || [];\n      } else {\n        console.error('Thread with ID', newThreadId, 'not found');\n        this.currentThread = {};\n        this.messages = [];\n      }\n      console.log(\"Current thread: \", this.currentThread);\n    },\n    async sendMessage(newMessage) {\n      // if (!this.newMessage.trim()) return;\n\n      console.log(\"start sending message in send message..\");\n      this.messages.push({\n        text: newMessage.trim(),\n        isUser: true,\n        typing: true,\n        timestamp: new Date().toLocaleTimeString()\n      });\n      // Simulate a delay for typing effect, then set typing to false\n\n      this.newMessage = '';\n      const stockCode = this.extractStockCode(this.messages[this.messages.length - 1].text);\n      if (stockCode != '') {\n        try {\n          const price = await fetchStockPrice(stockCode);\n          const timeStamp = new Date().toLocaleTimeString();\n          console.log(\"This is time stamp when ask about stock price: \", timeStamp);\n          let responseText = `Giá cổ phiếu ${stockCode} hiện giờ là $${price}, tính theo mốc thời gian ${timeStamp} `;\n          // if (shares !== null) {\n          //   // If both stock code and shares are provided, calculate total value\n          //   const totalValue = (Number(price) * shares).toFixed(2);\n          //   responseText = `Bạn có ${shares} cổ phiếu ${stockCode}, với tổng trị giá là $${totalValue}.`;\n          //   this.messages.push({ text: `Bạn có ${shares} cổ phiếu ${stockCode}, với tổng trị giá là $${totalValue}.`, isUser: false, });\n          // }\n          this.addTypingResponse(responseText, false);\n          // Send a fixed message to the GPT API asking for analysis about the company\n          const analysisQuestion = `Phân tích các số liệu sau từ công ty Tesla Chỉ Số Nâng CaoTên\tCông ty\tNgành\n      Tỉ số P/E TTM\t39.31\t18.18\n  Giá trên doanh thu TTM\t5.66\t3.93\n  Giá và dòng tiền mặt MRQ\t64.94\t16.68\n  Giá và dòng tiền mặt tự do TTM\t388.36\t33.6\n  Giá trên giá ghi sổ sách MRQ\t8.34\t2.67\n  Giá trên sổ sách hữu hình MRQ\t8.39\t0.64\n        \n  Khả năng sinh lợi: TTM đối với Biên Lợi Trung Bình 5 Năm TTM (%)  TB 5 năm (%)\n  Lãi gộp\n  Lãi gộp kinh doanh\n  Tỷ lệ lời trước thuế\n  Hệ số biên lợi nhuận ròng\n  0%\n  5%\n  10%\n  15%\n  20%\n  25%\n  Hệ số biên lợi nhuận ròng\n       TTM (%)\t14.37%\n       TB 5 năm (%)\t7.59%\n   \n  Lãi gộp TTM\t17.78%\t17.76\n  Lãi Gộp 5YA\t21.49%\t14.78\n  Lãi gộp kinh doanh TTM\t7.81%\t-8.16\n  Lãi gộp kinh doanh 5YA\t8.96%\t-2,221.2\n  Tỷ lệ lời trước thuế TTM\t9.21%\t-11.27\n  Tỷ lệ lời trước thuế 5YA\t7.96%\t-2,230.78\n  Hệ số biên lợi nhuận ròng TTM\t14.37%\t-11.97\n  Hệ số biên lợi nhuận ròng 5YA\t7.59%\t-2,209.64\n        \n  Doanh thu/Cổ phần TTM\t29.75\t11,209.08\n  EPS cơ bản ANN\t4.73\t637.24\n  EPS pha loãng ANN\t4.3\t637.15\n  Giá trị sổ sách/Cổ phần MRQ\t20.21\t6,320.76\n  Giá trị sổ sách hữu hình/Cổ phần MRQ\t20.06\t6,055.95\n  Tiền mặt/Cổ phần MRQ\t3.71\t1,383.5\n  Dòng tiền/Cổ phần TTM\t3.45\t-72.97\n       `;\n          const gptResponse = await gptAPICall(analysisQuestion);\n          const gptText = gptResponse.choices[0].message.content;\n          this.addTypingResponse(gptText, false);\n        } catch (error) {\n          console.error('Error:', error);\n          this.messages.push({\n            text: `Error fetching data for ${stockCode}.`,\n            isUser: false,\n            timestamp: new Date().toLocaleTimeString()\n          });\n        }\n      } else {\n        setTimeout(() => {\n          this.addTypingResponse('Tôi là FinBud, trợ lý AI trong lĩnh vực tài chính của bạn, phát triển bởi Bui Dinh Tri. Tôi được cấu hình đặc biệt trên nền tảng GPT-3.5 Turbo, với mục tiêu cung cấp thông tin sâu hơn và chuyên môn về tài chính và thị trường cổ phiếu.', false);\n        }, 300);\n      }\n    },\n    addTypingResponse(text, isUser) {\n      // Add a typing message first\n      const typingMessage = {\n        text: text,\n        isUser: isUser,\n        typing: true,\n        timestamp: new Date().toLocaleTimeString(),\n        username: isUser ? 'You' : 'FinBud Bot'\n      };\n      this.messages.push(typingMessage);\n      setTimeout(() => {\n        typingMessage.text = text;\n        typingMessage.typing = false;\n        this.$forceUpdate(); // Force update to show changes\n      }, 2000); // simulate typing delay\n    },\n    extractStockCode(message) {\n      const pattern = /\\b[A-Z]{3,5}\\b/g;\n      const matches = message.match(pattern) || [];\n      console.log(\"Ham extract: \", matches);\n      return matches;\n    },\n    extractSharesAndCode(message) {\n      // Regex to find stock codes: assumes codes are upper-case letters optionally followed by numbers\n      const stockCodePattern = /\\b[A-Z]{1,5}\\b/g;\n      // Regex to find numbers: looks for numbers that may have commas and come after the word 'shares'\n      const sharesPattern = /(\\b\\d{1,3}(,\\d{3})*\\b)(?=\\s*shares)/gi;\n      const stockCodes = message.match(stockCodePattern);\n      const sharesMatches = message.match(sharesPattern);\n      let shares;\n      if (sharesMatches && sharesMatches.length > 0) {\n        // Remove commas and convert to integer\n        shares = parseInt(sharesMatches[0].replace(/,/g, ''), 10);\n      }\n\n      // We return the first stock code found and the number of shares, if any\n      return {\n        stockCode: stockCodes ? stockCodes[0] : null,\n        // Just taking the first match for simplicity\n        shares: shares || null\n      };\n    },\n    async calculateTotalValue(stockCode, shares) {\n      if (!stockCode || !shares) {\n        throw new Error(\"Stock code or number of shares missing.\");\n      }\n      try {\n        const price = await fetchStockPrice(stockCode);\n        // Convert price to a number and calculate total value\n        const totalValue = (Number(price) * shares).toFixed(2);\n        return totalValue;\n      } catch (error) {\n        console.error('Error calculating total value:', error);\n        throw error; // Re-throw the error to handle it in the calling function\n      }\n    },\n    async fakeResponse(message) {\n      // Simulate fake response from the backend API\n      return \"This is a fake response to the message: \" + message;\n    },\n    mounted() {\n      // Update the current time every second\n      setInterval(() => {\n        this.currentTime = new Date().toLocaleTimeString();\n      }, 500);\n    }\n  }\n};","map":{"version":3,"names":["ChatHeader","ChatFrame","MessageComponent","UserInput","fetchStockPrice","gptAPICall","name","props","components","data","newMessage","messages","userAvatar","require","botAvatar","currentThread","watch","threadId","immediate","handler","newThreadId","console","log","updateCurrentThread","computed","currentChatWindow","id","methods","clearMessage","thread","toString","error","sendMessage","push","text","trim","isUser","typing","timestamp","Date","toLocaleTimeString","stockCode","extractStockCode","length","price","timeStamp","responseText","addTypingResponse","analysisQuestion","gptResponse","gptText","choices","message","content","setTimeout","typingMessage","username","$forceUpdate","pattern","matches","match","extractSharesAndCode","stockCodePattern","sharesPattern","stockCodes","sharesMatches","shares","parseInt","replace","calculateTotalValue","Error","totalValue","Number","toFixed","fakeResponse","mounted","setInterval","currentTime"],"sources":["/Users/buidinhtri/Desktop/FindBud/FinBud-AI-bot/src/views/ChatView.vue"],"sourcesContent":["<template>\n  <div class=\"home-container\">\n    <div class=\"chat-container\">\n      <ChatHeader :threadId=\"currentThread\" />\n      <ChatFrame>\n        <MessageComponent v-for=\"(message, index) in messages\" :key=\"index\" :is-user=\"message.isUser\"\n          :text=\"message.text\" :typing=\"message.typing\" :timestamp=\"message.timestamp\"\n          :username=\"message.isUser ? 'Tri Bui' : 'FinBud Bot'\" :avatar-src=\"message.isUser ? userAvatar : botAvatar\" />\n      </ChatFrame>\n\n\n\n      <UserInput @send-message=\"sendMessage\" @clear-message=\"clearMessage\" />\n    </div>\n\n\n  </div>\n</template>\n\n<script>\nimport ChatHeader from '../components/ChatHeader.vue';\nimport ChatFrame from '../components/ChatFrame.vue'\nimport MessageComponent from '../components/MessageComponent.vue';\nimport UserInput from '../components/UserInput.vue';\nimport { fetchStockPrice } from '@/services/stockServices';\nimport { gptAPICall } from '@/services/gptServices';\n\n\nexport default {\n  name: 'ChatView',\n  props: ['threadId'],\n  components: {\n    ChatHeader,\n    ChatFrame,\n    MessageComponent,\n    UserInput,\n  },\n  data() {\n    return {\n      newMessage: '',\n      messages: [],\n      userAvatar: require('@/assets/tri.jpeg'),\n      botAvatar: require('@/assets/bot.png'),\n      currentThread: {}, // The current selected thread\n    };\n  },\n\n  watch: {\n    threadId: {\n      immediate: true,\n      handler(newThreadId) {\n        console.log('Received new thread ID:', newThreadId);\n        if (newThreadId != null) {\n          console.log(\"Hello\");\n          this.updateCurrentThread(newThreadId);\n        }\n      }\n    },\n  },\n  computed: {\n    currentChatWindow() {\n      // Dynamic component name based on the selected thread or default chat window\n      return this.currentThread.id ? 'ChatWindow' : 'DefaultChatWindow';\n    },\n  },\n  methods: {\n    clearMessage() {\n      this.newMessage = ''\n    },\n    // sendMessage(newMessage) {\n    //   console.log(\"start sending this.newMessage: \", newMessage)\n    //   this.messages.push({\n    //     text: newMessage.trim(),\n    //     isUser: true,\n    //     typing: true,\n    //     timestamp: new Date().toLocaleTimeString()\n    //   });\n    //   // Simulate a delay for typing effect, then set typing to false\n    //   console.log(\"Updated messages array: \", this.messages);\n\n    //   this.newMessage = '';\n    // },\n\n    updateCurrentThread(newThreadId) {\n      console.log(\"Update current thread function triggered: \", newThreadId)\n      // const thread = this.threads.find(thread => thread.id.toString() === newThreadId);\n      const thread = newThreadId.toString();\n      console.log(thread)\n      if (thread) {\n        this.currentThread = thread;\n        // this.messages = thread.messages || [];\n      } else {\n        console.error('Thread with ID', newThreadId, 'not found');\n        this.currentThread = {};\n        this.messages = [];\n      }\n      console.log(\"Current thread: \", this.currentThread)\n    },\n    async sendMessage(newMessage) {\n      // if (!this.newMessage.trim()) return;\n\n      console.log(\"start sending message in send message..\")\n\n      this.messages.push({\n        text: newMessage.trim(),\n        isUser: true,\n        typing: true,\n        timestamp: new Date().toLocaleTimeString()\n      });\n      // Simulate a delay for typing effect, then set typing to false\n\n      this.newMessage = '';\n\n      const stockCode = this.extractStockCode(this.messages[this.messages.length - 1].text);\n      if (stockCode != '') {\n        try {\n          const price = await fetchStockPrice(stockCode);\n          const timeStamp = new Date().toLocaleTimeString();\n          console.log(\"This is time stamp when ask about stock price: \", timeStamp)\n          let responseText = `Giá cổ phiếu ${stockCode} hiện giờ là $${price}, tính theo mốc thời gian ${timeStamp} `;\n          // if (shares !== null) {\n          //   // If both stock code and shares are provided, calculate total value\n          //   const totalValue = (Number(price) * shares).toFixed(2);\n          //   responseText = `Bạn có ${shares} cổ phiếu ${stockCode}, với tổng trị giá là $${totalValue}.`;\n          //   this.messages.push({ text: `Bạn có ${shares} cổ phiếu ${stockCode}, với tổng trị giá là $${totalValue}.`, isUser: false, });\n          // }\n          this.addTypingResponse(responseText, false);\n          // Send a fixed message to the GPT API asking for analysis about the company\n          const analysisQuestion = `Phân tích các số liệu sau từ công ty Tesla Chỉ Số Nâng CaoTên\tCông ty\tNgành\n      Tỉ số P/E TTM\t39.31\t18.18\n  Giá trên doanh thu TTM\t5.66\t3.93\n  Giá và dòng tiền mặt MRQ\t64.94\t16.68\n  Giá và dòng tiền mặt tự do TTM\t388.36\t33.6\n  Giá trên giá ghi sổ sách MRQ\t8.34\t2.67\n  Giá trên sổ sách hữu hình MRQ\t8.39\t0.64\n        \n  Khả năng sinh lợi: TTM đối với Biên Lợi Trung Bình 5 Năm TTM (%)  TB 5 năm (%)\n  Lãi gộp\n  Lãi gộp kinh doanh\n  Tỷ lệ lời trước thuế\n  Hệ số biên lợi nhuận ròng\n  0%\n  5%\n  10%\n  15%\n  20%\n  25%\n  Hệ số biên lợi nhuận ròng\n       TTM (%)\t14.37%\n       TB 5 năm (%)\t7.59%\n   \n  Lãi gộp TTM\t17.78%\t17.76\n  Lãi Gộp 5YA\t21.49%\t14.78\n  Lãi gộp kinh doanh TTM\t7.81%\t-8.16\n  Lãi gộp kinh doanh 5YA\t8.96%\t-2,221.2\n  Tỷ lệ lời trước thuế TTM\t9.21%\t-11.27\n  Tỷ lệ lời trước thuế 5YA\t7.96%\t-2,230.78\n  Hệ số biên lợi nhuận ròng TTM\t14.37%\t-11.97\n  Hệ số biên lợi nhuận ròng 5YA\t7.59%\t-2,209.64\n        \n  Doanh thu/Cổ phần TTM\t29.75\t11,209.08\n  EPS cơ bản ANN\t4.73\t637.24\n  EPS pha loãng ANN\t4.3\t637.15\n  Giá trị sổ sách/Cổ phần MRQ\t20.21\t6,320.76\n  Giá trị sổ sách hữu hình/Cổ phần MRQ\t20.06\t6,055.95\n  Tiền mặt/Cổ phần MRQ\t3.71\t1,383.5\n  Dòng tiền/Cổ phần TTM\t3.45\t-72.97\n       `;\n          const gptResponse = await gptAPICall(analysisQuestion);\n          const gptText = gptResponse.choices[0].message.content;\n\n          this.addTypingResponse(gptText, false);\n\n        } catch (error) {\n          console.error('Error:', error);\n          this.messages.push({ text: `Error fetching data for ${stockCode}.`, isUser: false, timestamp: new Date().toLocaleTimeString() });\n        }\n      }\n      else {\n        setTimeout(\n          () => {\n            this.addTypingResponse('Tôi là FinBud, trợ lý AI trong lĩnh vực tài chính của bạn, phát triển bởi Bui Dinh Tri. Tôi được cấu hình đặc biệt trên nền tảng GPT-3.5 Turbo, với mục tiêu cung cấp thông tin sâu hơn và chuyên môn về tài chính và thị trường cổ phiếu.', false);\n          }, 300\n        )\n      }\n\n\n\n\n\n    },\n\n    addTypingResponse(text, isUser) {\n      // Add a typing message first\n      const typingMessage = {\n        text: text,\n        isUser: isUser,\n        typing: true,\n        timestamp: new Date().toLocaleTimeString(),\n        username: isUser ? 'You' : 'FinBud Bot'\n      };\n\n      this.messages.push(typingMessage);\n      setTimeout(() => {\n        typingMessage.text = text;\n        typingMessage.typing = false;\n        this.$forceUpdate(); // Force update to show changes\n      }, 2000); // simulate typing delay\n    },\n\n    extractStockCode(message) {\n      const pattern = /\\b[A-Z]{3,5}\\b/g;\n      const matches = message.match(pattern) || [];\n      console.log(\"Ham extract: \", matches)\n      return matches;\n    },\n\n    extractSharesAndCode(message) {\n      // Regex to find stock codes: assumes codes are upper-case letters optionally followed by numbers\n      const stockCodePattern = /\\b[A-Z]{1,5}\\b/g;\n      // Regex to find numbers: looks for numbers that may have commas and come after the word 'shares'\n      const sharesPattern = /(\\b\\d{1,3}(,\\d{3})*\\b)(?=\\s*shares)/gi;\n\n      const stockCodes = message.match(stockCodePattern);\n      const sharesMatches = message.match(sharesPattern);\n\n      let shares;\n      if (sharesMatches && sharesMatches.length > 0) {\n        // Remove commas and convert to integer\n        shares = parseInt(sharesMatches[0].replace(/,/g, ''), 10);\n      }\n\n      // We return the first stock code found and the number of shares, if any\n      return {\n        stockCode: stockCodes ? stockCodes[0] : null, // Just taking the first match for simplicity\n        shares: shares || null\n      };\n    },\n\n    async calculateTotalValue(stockCode, shares) {\n      if (!stockCode || !shares) {\n        throw new Error(\"Stock code or number of shares missing.\");\n      }\n      try {\n        const price = await fetchStockPrice(stockCode);\n        // Convert price to a number and calculate total value\n        const totalValue = (Number(price) * shares).toFixed(2);\n        return totalValue;\n      } catch (error) {\n        console.error('Error calculating total value:', error);\n        throw error; // Re-throw the error to handle it in the calling function\n      }\n    },\n\n    async fakeResponse(message) {\n      // Simulate fake response from the backend API\n      return \"This is a fake response to the message: \" + message;\n    },\n\n\n    mounted() {\n      // Update the current time every second\n      setInterval(() => {\n        this.currentTime = new Date().toLocaleTimeString();\n      }, 500);\n    }\n  }\n}\n</script>\n\n<style>\n.home-container {\n  width: 100%;\n  /* Ensures the container fills the viewport width */\n  box-sizing: border-box;\n  /* Includes padding and border in the element's total width */\n}\n\n.chat-container {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}