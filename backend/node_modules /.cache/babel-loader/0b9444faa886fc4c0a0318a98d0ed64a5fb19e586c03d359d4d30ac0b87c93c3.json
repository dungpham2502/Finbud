{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ChatHeader from '../components/ChatHeader.vue';\nimport ChatFrame from '../components/ChatFrame.vue';\nimport MessageComponent from '../components/MessageComponent.vue';\nimport UserInput from '../components/UserInput.vue';\nimport { fetchStockPrice } from '@/services/stockServices';\nimport { gptAPICall } from '@/services/gptServices';\nimport SideBar from '../components/SideBar.vue';\nexport default {\n  name: 'ChatView',\n  props: ['threadId'],\n  components: {\n    ChatHeader,\n    ChatFrame,\n    MessageComponent,\n    UserInput,\n    SideBar\n  },\n  data() {\n    return {\n      newMessage: '',\n      messages: [],\n      userAvatar: require('@/assets/tri.jpeg'),\n      botAvatar: require('@/assets/bot.png'),\n      currentThread: {},\n      threads: []\n    };\n  },\n  watch: {\n    threadId: {\n      immediate: true,\n      handler(newThreadId) {\n        console.log('Received new thread ID:', newThreadId);\n        if (newThreadId != null) {\n          this.updateCurrentThread(newThreadId);\n        }\n      }\n    }\n  },\n  methods: {\n    clearMessage() {\n      this.newMessage = '';\n    },\n    updateCurrentThread(newThreadId) {\n      console.log(\"Update current thread function triggered: \", newThreadId);\n      const thread = this.threads.find(thread => thread.id.toString() === newThreadId);\n      console.log(thread);\n      if (thread) {\n        this.currentThread = thread;\n        this.messages = thread.messages || [];\n      } else {\n        console.error('Thread with ID', newThreadId, 'not found');\n        this.currentThread = {};\n        this.messages = [];\n      }\n      console.log(\"Current thread: \", this.currentThread);\n    },\n    addThread(newThread) {\n      newThread.id = this.threads.length + 1;\n      this.threads.push(newThread);\n      console.log(\"Added new thread: \", newThread);\n    },\n    editThread(index) {\n      this.threads[index].editing = true;\n    },\n    saveThreadName({\n      newName,\n      index\n    }) {\n      this.threads[index].name = newName;\n      this.threads[index].editing = false;\n    },\n    cancelEdit(index) {\n      this.threads[index].editing = false;\n    },\n    selectThread(index) {\n      this.updateCurrentThread(this.threads[index].id.toString());\n    },\n    async sendMessage(newMessage) {\n      console.log(\"start sending message in send message..\");\n      this.messages.push({\n        text: newMessage.trim(),\n        isUser: true,\n        typing: true,\n        timestamp: new Date().toLocaleTimeString()\n      });\n      this.newMessage = '';\n      const stockCode = this.extractStockCode(this.messages[this.messages.length - 1].text);\n      if (stockCode.length > 0) {\n        try {\n          const price = await fetchStockPrice(stockCode[0]);\n          const timeStamp = new Date().toLocaleTimeString();\n          console.log(\"This is time stamp when asking about stock price: \", timeStamp);\n          let responseText = `The current price of ${stockCode[0]} stock is $${price}, as of ${timeStamp}.`;\n          this.addTypingResponse(responseText, false);\n          const analysisQuestion = `Analyze the following data for Tesla:\n            P/E ratio TTM: 39.31\n            Price to sales TTM: 5.66\n            Price to cash flow MRQ: 64.94\n            Price to free cash flow TTM: 388.36\n            Price to book MRQ: 8.34\n            Price to tangible book MRQ: 8.39\n            Profitability:\n            Gross margin TTM: 17.78%\n            Gross margin 5YA: 21.49%\n            Operating margin TTM: 7.81%\n            Operating margin 5YA: 8.96%\n            Pre-tax margin TTM: 9.21%\n            Pre-tax margin 5YA: 7.96%\n            Net margin TTM: 14.37%\n            Net margin 5YA: 7.59%\n            Revenue per share TTM: 29.75\n            Basic EPS ANN: 4.73\n            Diluted EPS ANN: 4.3\n            Book value per share MRQ: 20.21\n            Tangible book value per share MRQ: 20.06\n            Cash per share MRQ: 3.71\n            Cash flow per share TTM: 3.45\n          `;\n          this.addTypingResponse(analysisQuestion, false);\n          const gptResponse = await gptAPICall(analysisQuestion);\n          const gptText = gptResponse.choices[0].message.content;\n          this.addTypingResponse(gptText, false);\n        } catch (error) {\n          console.error('Error:', error);\n          this.messages.push({\n            text: `Error fetching data for ${stockCode}.`,\n            isUser: false,\n            timestamp: new Date().toLocaleTimeString()\n          });\n        }\n      } else {\n        const userMessage = this.messages[this.messages.length - 1].text;\n        setTimeout(() => {\n          if (userMessage.toLowerCase().includes(\"ipo\")) {\n            this.addTypingResponse(\"IPO stands for Initial Public Offering. It's when a company sells its shares to the public for the first time. Think of it like when a company decides to let anyone buy a small piece of it.\", false);\n          } else if (userMessage.toLowerCase().includes(\"balance sheet\")) {\n            this.addTypingResponse(\"A balance sheet is like a financial snapshot of a company at a specific point in time. It shows what the company owns (assets), what it owes (liabilities), and the value left over for the owners (equity). Think of it as a list that helps you understand a company's financial health.\", false);\n          } else if (userMessage.toLowerCase().includes(\"define bond\")) {\n            this.addTypingResponse(\"Bonds are loans from investors to companies or governments. Investors receive regular interest payments and get their money back when the bond matures. Think of it like lending money to a friend with a promise. When you give them the money, they agree to pay you back a little extra each month (interest) and return the full amount you lent them after a certain time (maturity).\", false);\n          } else {\n            setTimeout(() => {\n              this.addTypingResponse('I am FinBud, your AI financial assistant developed by Bui Dinh Tri. I am specially configured on the GPT-3.5 Turbo platform to provide deeper insights and expertise in finance and stock markets.', false);\n            }, 300);\n          }\n        }, 2000);\n      }\n    },\n    addTypingResponse(text, isUser) {\n      const typingMessage = {\n        text: text,\n        isUser: isUser,\n        typing: true,\n        timestamp: new Date().toLocaleTimeString(),\n        username: isUser ? 'You' : 'FinBud Bot'\n      };\n      this.messages.push(typingMessage);\n      setTimeout(() => {\n        typingMessage.text = text;\n        typingMessage.typing = false;\n        this.$forceUpdate();\n      }, 2000);\n    },\n    extractStockCode(message) {\n      const pattern = /\\b[A-Z]{3,5}\\b/g;\n      const matches = message.match(pattern) || [];\n      console.log(\"Extracted stock codes: \", matches);\n      return matches;\n    }\n  },\n  mounted() {\n    setInterval(() => {\n      this.currentTime = new Date().toLocaleTimeString();\n    }, 500);\n  }\n};","map":{"version":3,"names":["ChatHeader","ChatFrame","MessageComponent","UserInput","fetchStockPrice","gptAPICall","SideBar","name","props","components","data","newMessage","messages","userAvatar","require","botAvatar","currentThread","threads","watch","threadId","immediate","handler","newThreadId","console","log","updateCurrentThread","methods","clearMessage","thread","find","id","toString","error","addThread","newThread","length","push","editThread","index","editing","saveThreadName","newName","cancelEdit","selectThread","sendMessage","text","trim","isUser","typing","timestamp","Date","toLocaleTimeString","stockCode","extractStockCode","price","timeStamp","responseText","addTypingResponse","analysisQuestion","gptResponse","gptText","choices","message","content","userMessage","setTimeout","toLowerCase","includes","typingMessage","username","$forceUpdate","pattern","matches","match","mounted","setInterval","currentTime"],"sources":["/Users/buidinhtri/Desktop/FindBud/FinBud-AI-bot/src/views/ChatView.vue"],"sourcesContent":["<template>\n  <div class=\"home-container\">\n    <SideBar\n      :threads=\"threads\"\n      @add-thread=\"addThread\"\n      @edit-thread=\"editThread\"\n      @save-thread-name=\"saveThreadName\"\n      @cancel-edit=\"cancelEdit\"\n      @select-thread=\"selectThread\"\n    />\n    <div class=\"chat-container\">\n     \n      <ChatFrame>\n        <MessageComponent\n          v-for=\"(message, index) in messages\"\n          :key=\"index\"\n          :is-user=\"message.isUser\"\n          :text=\"message.text\"\n          :typing=\"message.typing\"\n          :timestamp=\"message.timestamp\"\n          :username=\"message.isUser ? 'Tri Bui' : 'FinBud Bot'\"\n          :avatar-src=\"message.isUser ? userAvatar : botAvatar\"\n        />\n      </ChatFrame>\n      <UserInput @send-message=\"sendMessage\" @clear-message=\"clearMessage\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport ChatHeader from '../components/ChatHeader.vue';\nimport ChatFrame from '../components/ChatFrame.vue';\nimport MessageComponent from '../components/MessageComponent.vue';\nimport UserInput from '../components/UserInput.vue';\nimport { fetchStockPrice } from '@/services/stockServices';\nimport { gptAPICall } from '@/services/gptServices';\nimport SideBar from '../components/SideBar.vue';\n\nexport default {\n  name: 'ChatView',\n  props: ['threadId'],\n  components: {\n    ChatHeader,\n    ChatFrame,\n    MessageComponent,\n    UserInput,\n    SideBar\n  },\n  data() {\n    return {\n      newMessage: '',\n      messages: [],\n      userAvatar: require('@/assets/tri.jpeg'),\n      botAvatar: require('@/assets/bot.png'),\n      currentThread: {},\n      threads: []\n    };\n  },\n  watch: {\n    threadId: {\n      immediate: true,\n      handler(newThreadId) {\n        console.log('Received new thread ID:', newThreadId);\n        if (newThreadId != null) {\n          this.updateCurrentThread(newThreadId);\n        }\n      }\n    },\n  },\n  methods: {\n    clearMessage() {\n      this.newMessage = ''\n    },\n    updateCurrentThread(newThreadId) {\n      console.log(\"Update current thread function triggered: \", newThreadId)\n      const thread = this.threads.find(thread => thread.id.toString() === newThreadId);\n      console.log(thread)\n      if (thread) {\n        this.currentThread = thread;\n        this.messages = thread.messages || [];\n      } else {\n        console.error('Thread with ID', newThreadId, 'not found');\n        this.currentThread = {};\n        this.messages = [];\n      }\n      console.log(\"Current thread: \", this.currentThread)\n    },\n    addThread(newThread) {\n      newThread.id = this.threads.length + 1;\n      this.threads.push(newThread);\n      console.log(\"Added new thread: \", newThread);\n    },\n    editThread(index) {\n      this.threads[index].editing = true;\n    },\n    saveThreadName({ newName, index }) {\n      this.threads[index].name = newName;\n      this.threads[index].editing = false;\n    },\n    cancelEdit(index) {\n      this.threads[index].editing = false;\n    },\n    selectThread(index) {\n      this.updateCurrentThread(this.threads[index].id.toString());\n    },\n    async sendMessage(newMessage) {\n      console.log(\"start sending message in send message..\")\n\n      this.messages.push({\n        text: newMessage.trim(),\n        isUser: true,\n        typing: true,\n        timestamp: new Date().toLocaleTimeString()\n      });\n\n      this.newMessage = '';\n\n      const stockCode = this.extractStockCode(this.messages[this.messages.length - 1].text);\n      if (stockCode.length > 0) {\n        try {\n          const price = await fetchStockPrice(stockCode[0]);\n          const timeStamp = new Date().toLocaleTimeString();\n          console.log(\"This is time stamp when asking about stock price: \", timeStamp)\n          let responseText = `The current price of ${stockCode[0]} stock is $${price}, as of ${timeStamp}.`;\n\n          this.addTypingResponse(responseText, false);\n\n          const analysisQuestion = `Analyze the following data for Tesla:\n            P/E ratio TTM: 39.31\n            Price to sales TTM: 5.66\n            Price to cash flow MRQ: 64.94\n            Price to free cash flow TTM: 388.36\n            Price to book MRQ: 8.34\n            Price to tangible book MRQ: 8.39\n            Profitability:\n            Gross margin TTM: 17.78%\n            Gross margin 5YA: 21.49%\n            Operating margin TTM: 7.81%\n            Operating margin 5YA: 8.96%\n            Pre-tax margin TTM: 9.21%\n            Pre-tax margin 5YA: 7.96%\n            Net margin TTM: 14.37%\n            Net margin 5YA: 7.59%\n            Revenue per share TTM: 29.75\n            Basic EPS ANN: 4.73\n            Diluted EPS ANN: 4.3\n            Book value per share MRQ: 20.21\n            Tangible book value per share MRQ: 20.06\n            Cash per share MRQ: 3.71\n            Cash flow per share TTM: 3.45\n          `;\n          this.addTypingResponse(analysisQuestion, false);\n          const gptResponse = await gptAPICall(analysisQuestion);\n          const gptText = gptResponse.choices[0].message.content;\n\n          this.addTypingResponse(gptText, false);\n\n        } catch (error) {\n          console.error('Error:', error);\n          this.messages.push({ text: `Error fetching data for ${stockCode}.`, isUser: false, timestamp: new Date().toLocaleTimeString() });\n        }\n      }\n      else {\n        const userMessage = this.messages[this.messages.length - 1].text;\n        setTimeout(() => {\n          if (userMessage.toLowerCase().includes(\"ipo\")) {\n            this.addTypingResponse(\"IPO stands for Initial Public Offering. It's when a company sells its shares to the public for the first time. Think of it like when a company decides to let anyone buy a small piece of it.\", false);\n          }  else if (userMessage.toLowerCase().includes(\"balance sheet\")) {\n            this.addTypingResponse(\"A balance sheet is like a financial snapshot of a company at a specific point in time. It shows what the company owns (assets), what it owes (liabilities), and the value left over for the owners (equity). Think of it as a list that helps you understand a company's financial health.\", false);\n          }  else if (userMessage.toLowerCase().includes(\"define bond\")) {\n            this.addTypingResponse(\"Bonds are loans from investors to companies or governments. Investors receive regular interest payments and get their money back when the bond matures. Think of it like lending money to a friend with a promise. When you give them the money, they agree to pay you back a little extra each month (interest) and return the full amount you lent them after a certain time (maturity).\", false);\n          }\n          else {\n            setTimeout(\n              () => {\n                this.addTypingResponse('I am FinBud, your AI financial assistant developed by Bui Dinh Tri. I am specially configured on the GPT-3.5 Turbo platform to provide deeper insights and expertise in finance and stock markets.', false);\n              }, 300\n            )\n          }\n        }, 2000);\n      }\n    },\n\n    addTypingResponse(text, isUser) {\n      const typingMessage = {\n        text: text,\n        isUser: isUser,\n        typing: true,\n        timestamp: new Date().toLocaleTimeString(),\n        username: isUser ? 'You' : 'FinBud Bot'\n      };\n\n      this.messages.push(typingMessage);\n      setTimeout(() => {\n        typingMessage.text = text;\n        typingMessage.typing = false;\n        this.$forceUpdate();\n      }, 2000);\n    },\n\n    extractStockCode(message) {\n      const pattern = /\\b[A-Z]{3,5}\\b/g;\n      const matches = message.match(pattern) || [];\n      console.log(\"Extracted stock codes: \", matches)\n      return matches;\n    },\n  },\n\n  mounted() {\n    setInterval(() => {\n      this.currentTime = new Date().toLocaleTimeString();\n    }, 500);\n  }\n}\n</script>\n\n\n<style scoped>\n.home-container {\n  width: 100%;\n  box-sizing: border-box;\n}\n\n.chat-container {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n}\n</style>\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}