{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-fbdfdc34\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"src\"];\nconst _hoisted_2 = {\n  class: \"message-content-wrapper\"\n};\nconst _hoisted_3 = {\n  class: \"username\"\n};\nconst _hoisted_4 = {\n  class: \"timestamp\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", {\n    class: _normalizeClass(['message-wrapper', {\n      'user': $props.isUser,\n      'bot': !$props.isUser\n    }])\n  }, [_createElementVNode(\"img\", {\n    src: $props.avatarSrc,\n    class: \"avatar\"\n  }, null, 8 /* PROPS */, _hoisted_1), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, _toDisplayString($props.username), 1 /* TEXT */), _createCommentVNode(\" Use displayedText computed property \"), _createElementVNode(\"div\", {\n    class: _normalizeClass(['message-content', {\n      'typing': $props.typing\n    }])\n  }, _toDisplayString($options.displayedText), 3 /* TEXT, CLASS */)]), _createElementVNode(\"div\", _hoisted_4, _toDisplayString($props.timestamp), 1 /* TEXT */)], 2 /* CLASS */)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createElementVNode","_normalizeClass","$props","isUser","src","avatarSrc","_hoisted_1","_hoisted_2","_hoisted_3","_toDisplayString","username","_createCommentVNode","typing","$options","displayedText","_hoisted_4","timestamp"],"sources":["/Users/buidinhtri/Desktop/FindBud/FinBud-AI-bot/src/components/MessageComponent.vue"],"sourcesContent":["<template>\n  <div>\n    <div :class=\"['message-wrapper', { 'user': isUser, 'bot': !isUser }]\">\n      <img :src=\"avatarSrc\" class=\"avatar\">\n      <div class=\"message-content-wrapper\">\n        <div class=\"username\">{{ username }}</div>\n        <!-- Use displayedText computed property -->\n        <div :class=\"['message-content', { 'typing': typing }]\">{{ displayedText }}</div>\n      </div>\n      <div class=\"timestamp\">{{ timestamp }}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'MessageComponent',\n  props: ['isUser', 'text', 'typing', 'timestamp', 'username', 'avatarSrc'],\n  data() {\n    return {\n      textProgress: 0, // Initial progress of the typing animation\n    };\n  },\n  computed: {\n    displayedText() {\n      // Return the substring of text based on the current typing progress\n      return this.text.substring(0, this.textProgress);\n    },\n  },\n  watch: {\n    typing(newValue) {\n      if (newValue) {\n        // Start typing effect when typing is true\n        this.startTypingEffect();\n      }\n    }\n  },\n  methods: {\n    startTypingEffect() {\n      const length = this.text.length;\n      const typingSpeed = 20; // milliseconds per character\n      let currentLength = 0;\n\n      const interval = setInterval(() => {\n        currentLength++;\n        this.textProgress = currentLength;\n        if (currentLength >= length) {\n          clearInterval(interval); // Stop the interval when the full text is displayed\n        }\n      }, typingSpeed);\n    }\n  },\n  mounted() {\n    if (this.typing) {\n      this.startTypingEffect();\n    }\n  }\n}\n</script>\n\n<style scoped>\n.message-wrapper {\n  display: flex;\n  align-items: flex-end;\n  gap: 10px;\n  margin-bottom: 16px;\n  overflow: hidden;\n  word-wrap: break-word;\n}\n\n.chat-window {\n  height: 80vh;\n  /* Adjusted to 80% of viewport height */\n  border: 1px solid #e0e0e0;\n  background-color: #fff;\n  max-height: 100%;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  overflow-y: auto;\n  /* Enable scrolling if content exceeds window */\n}\n\n.message-content-wrapper {\n  display: inline-flex;\n  flex-direction: column;\n  align-items: flex-start;\n  max-width: 80%;\n  word-wrap: break-word;\n}\n\n.avatar {\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  margin-left: 1%;\n}\n\n.message-content {\n  display: inline-block;\n  padding: 10px;\n  margin: 4px 0;\n  border-radius: 16px;\n  background-color: #007bff;\n  color: #fff;\n  border: 1px solid transparent;\n  text-align: left;\n  white-space: pre-wrap; \n}\n\n@keyframes typing {\n  from {\n    width: 0; /* Use width instead of max-width for a smoother start */\n  }\n  to {\n    width: 100%; /* Adjust to full width of the containing block */\n  }\n}\n\n\n.message-container.is-user .message-content {\n  background-color: #f0f0f0;\n  color: #000;\n}\n</style>\n"],"mappings":";;mBAAA;;EAIWA,KAAK,EAAC;AAAyB;;EAC7BA,KAAK,EAAC;AAAU;;EAIlBA,KAAK,EAAC;AAAW;;uBAR1BC,mBAAA,CAUM,cATJC,mBAAA,CAQM;IARAF,KAAK,EAFfG,eAAA;MAAA,QAE+CC,MAAA,CAAAC,MAAM;MAAA,QAAUD,MAAA,CAAAC;IAAM;MAC/DH,mBAAA,CAAqC;IAA/BI,GAAG,EAAEF,MAAA,CAAAG,SAAS;IAAEP,KAAK,EAAC;0BAHlCQ,UAAA,GAIMN,mBAAA,CAIM,OAJNO,UAIM,GAHJP,mBAAA,CAA0C,OAA1CQ,UAA0C,EAAAC,gBAAA,CAAjBP,MAAA,CAAAQ,QAAQ,kBACjCC,mBAAA,yCAA4C,EAC5CX,mBAAA,CAAiF;IAA3EF,KAAK,EAPnBG,eAAA;MAAA,UAOqDC,MAAA,CAAAU;IAAM;sBAAQC,QAAA,CAAAC,aAAa,wB,GAE1Ed,mBAAA,CAA4C,OAA5Ce,UAA4C,EAAAN,gBAAA,CAAlBP,MAAA,CAAAc,SAAS,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}