{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, withCtx as _withCtx, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"home-container\"\n};\nconst _hoisted_2 = {\n  class: \"chat-container\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"suggestions-container\"\n};\nconst _hoisted_4 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_SideBar = _resolveComponent(\"SideBar\");\n  const _component_ChatHeader = _resolveComponent(\"ChatHeader\");\n  const _component_MessageComponent = _resolveComponent(\"MessageComponent\");\n  const _component_ChatFrame = _resolveComponent(\"ChatFrame\");\n  const _component_UserInput = _resolveComponent(\"UserInput\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_SideBar), _createCommentVNode(\" Include the sidebar here \"), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_ChatHeader, {\n    threadId: $data.currentThread\n  }, null, 8 /* PROPS */, [\"threadId\"]), _createVNode(_component_ChatFrame, null, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, (message, index) => {\n      return _openBlock(), _createBlock(_component_MessageComponent, {\n        key: index,\n        \"is-user\": message.isUser,\n        text: message.text,\n        typing: message.typing,\n        timestamp: message.timestamp,\n        username: message.isUser ? 'Tri Bui' : 'FinBud Bot',\n        \"avatar-src\": message.isUser ? $data.userAvatar : $data.botAvatar\n      }, null, 8 /* PROPS */, [\"is-user\", \"text\", \"typing\", \"timestamp\", \"username\", \"avatar-src\"]);\n    }), 128 /* KEYED_FRAGMENT */))]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_UserInput, {\n    onSendMessage: $options.sendMessage,\n    onClearMessage: $options.clearMessage\n  }, null, 8 /* PROPS */, [\"onSendMessage\", \"onClearMessage\"])])]), $data.showSuggestions ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.suggestions, (suggestion, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"suggestion-card\",\n      key: index,\n      onClick: $event => $options.sendSuggestion(suggestion)\n    }, [_createElementVNode(\"p\", null, _toDisplayString(suggestion), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_Fragment","_createElementVNode","_hoisted_1","_createVNode","_component_SideBar","_createCommentVNode","_hoisted_2","_component_ChatHeader","threadId","$data","currentThread","_component_ChatFrame","default","_withCtx","_renderList","messages","message","index","_createBlock","_component_MessageComponent","isUser","text","typing","timestamp","username","userAvatar","botAvatar","_","_component_UserInput","onSendMessage","$options","sendMessage","onClearMessage","clearMessage","showSuggestions","_hoisted_3","suggestions","suggestion","onClick","$event","sendSuggestion","_toDisplayString","_hoisted_4"],"sources":["/Users/buidinhtri/Desktop/FindBud/FinBud-AI-bot/src/views/ChatView.vue"],"sourcesContent":["<template>\n  <div class=\"home-container\">\n    <SideBar /> <!-- Include the sidebar here -->\n    <div class=\"chat-container\">\n      <ChatHeader :threadId=\"currentThread\" />\n      <ChatFrame>\n        <MessageComponent v-for=\"(message, index) in messages\" :key=\"index\"\n          :is-user=\"message.isUser\" :text=\"message.text\" :typing=\"message.typing\"\n          :timestamp=\"message.timestamp\" :username=\"message.isUser ? 'Tri Bui' : 'FinBud Bot'\"\n          :avatar-src=\"message.isUser ? userAvatar : botAvatar\" />\n      </ChatFrame>\n      <UserInput @send-message=\"sendMessage\" @clear-message=\"clearMessage\" />\n    </div>\n  </div>\n  <div class=\"suggestions-container\" v-if=\"showSuggestions\">\n    <div class=\"suggestion-card\" v-for=\"(suggestion, index) in suggestions\" :key=\"index\" @click=\"sendSuggestion(suggestion)\">\n      <p>{{ suggestion }}</p>\n    </div>\n  </div>\n</template>\n\n<style>\n.home-container {\n  display: flex;\n  width: 100%;\n  height: 100vh;\n}\n\n.chat-container {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n}\n\n.suggestions-container {\n  display: flex;\n  justify-content: center;\n  position: fixed;\n  bottom: 80px;\n  width: 100%;\n}\n\n.suggestion-card {\n  background-color: #333;\n  color: #fff;\n  padding: 15px;\n  margin: 5px;\n  border-radius: 10px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n  transition: transform 0.3s, box-shadow 0.3s;\n  cursor: pointer;\n}\n\n.suggestion-card:hover {\n  transform: scale(1.05);\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);\n}\n</style>\n\n<script>\nimport ChatHeader from '../components/ChatHeader.vue';\nimport ChatFrame from '../components/ChatFrame.vue'\nimport MessageComponent from '../components/MessageComponent.vue';\nimport UserInput from '../components/UserInput.vue';\nimport { fetchStockPrice } from '@/services/stockServices';\nimport { gptAPICall } from '@/services/gptServices';\nimport SideBar from '../components/SideBar.vue';\n\nexport default {\n  name: 'ChatView',\n  props: ['threadId'],\n  components: {\n    ChatHeader,\n    ChatFrame,\n    MessageComponent,\n    UserInput,\n    SideBar\n  },\n  data() {\n    return {\n      newMessage: '',\n      messages: [],\n      userAvatar: require('@/assets/tri.jpeg'),\n      botAvatar: require('@/assets/bot.png'),\n      currentThread: {}, // The current selected thread\n      showSuggestions: true,\n      suggestions: [\n        'How to invest in stocks?',\n        'What are the latest trends in the stock market?',\n        'Can you analyze Tesla stocks?'\n      ]\n    };\n  },\n\n  watch: {\n    threadId: {\n      immediate: true,\n      handler(newThreadId) {\n        console.log('Received new thread ID:', newThreadId);\n        if (newThreadId != null) {\n          console.log(\"Hello\");\n          this.updateCurrentThread(newThreadId);\n        }\n      }\n    },\n  },\n  computed: {\n    currentChatWindow() {\n      return this.currentThread.id ? 'ChatWindow' : 'DefaultChatWindow';\n    },\n  },\n  methods: {\n    clearMessage() {\n      this.newMessage = ''\n    },\n\n    updateCurrentThread(newThreadId) {\n      console.log(\"Update current thread function triggered: \", newThreadId)\n      const thread = newThreadId.toString();\n      console.log(thread)\n      if (thread) {\n        this.currentThread = thread;\n      } else {\n        console.error('Thread with ID', newThreadId, 'not found');\n        this.currentThread = {};\n        this.messages = [];\n      }\n      console.log(\"Current thread: \", this.currentThread)\n    },\n\n    async sendMessage(newMessage) {\n      console.log(\"start sending message in send message..\")\n\n      this.messages.push({\n        text: newMessage.trim(),\n        isUser: true,\n        typing: false,\n        timestamp: new Date().toLocaleTimeString()\n      });\n\n      this.newMessage = '';\n\n      const stockCode = this.extractStockCode(this.messages[this.messages.length - 1].text);\n      if (stockCode.length > 0) {\n        this.addTypingResponse('...', false);\n        setTimeout(async () => {\n          try {\n            const price = await fetchStockPrice(stockCode[0]);\n            const timeStamp = new Date().toLocaleTimeString();\n            console.log(\"This is time stamp when asking about stock price: \", timeStamp)\n            let responseText = `The current price of ${stockCode[0]} stock is $${price}, as of ${timeStamp}.`;\n\n            this.updateTypingResponse(responseText);\n\n            const analysisQuestion = `Analyze the following data for Tesla:\n              P/E ratio TTM: 39.31\n              Price to sales TTM: 5.66\n              Price to cash flow MRQ: 64.94\n              Price to free cash flow TTM: 388.36\n              Price to book MRQ: 8.34\n              Price to tangible book MRQ: 8.39\n              Profitability:\n              Gross margin TTM: 17.78%\n              Gross margin 5YA: 21.49%\n              Operating margin TTM: 7.81%\n              Operating margin 5YA: 8.96%\n              Pre-tax margin TTM: 9.21%\n              Pre-tax margin 5YA: 7.96%\n              Net margin TTM: 14.37%\n              Net margin 5YA: 7.59%\n              Revenue per share TTM: 29.75\n              Basic EPS ANN: 4.73\n              Diluted EPS ANN: 4.3\n              Book value per share MRQ: 20.21\n              Tangible book value per share MRQ: 20.06\n              Cash per share MRQ: 3.71\n              Cash flow per share TTM: 3.45\n            `;\n\n            const gptResponse = await gptAPICall(analysisQuestion);\n            const gptText = gptResponse.choices[0].message.content;\n\n            this.addTypingResponse('...', false);\n            setTimeout(() => {\n              this.updateTypingResponse(gptText);\n            }, 2000);\n\n          } catch (error) {\n            console.error('Error:', error);\n            this.messages.push({ text: `Error fetching data for ${stockCode}.`, isUser: false, timestamp: new Date().toLocaleTimeString() });\n          }\n        }, 2000);\n      } else {\n        setTimeout(() => {\n          this.addTypingResponse('I am FinBud, your AI financial assistant developed by Bui Dinh Tri. I am specially configured on the GPT-3.5 Turbo platform to provide deeper insights and expertise in finance and stock markets.', false);\n        }, 2000);\n      }\n    },\n\n    addTypingResponse(text, isUser) {\n      const typingMessage = {\n        text: text,\n        isUser: isUser,\n        typing: true,\n        timestamp: new Date().toLocaleTimeString(),\n        username: isUser ? 'You' : 'FinBud Bot'\n      };\n\n      this.messages.push(typingMessage);\n    },\n\n    updateTypingResponse(text) {\n      const lastMessage = this.messages[this.messages.length - 1];\n      lastMessage.text = text;\n      lastMessage.typing = false;\n      this.$forceUpdate();\n    },\n\n    sendSuggestion(suggestion) {\n      this.sendMessage(suggestion);\n      this.showSuggestions = false;\n    },\n\n    extractStockCode(message) {\n      const pattern = /\\b[A-Z]{3,5}\\b/g;\n      const matches = message.match(pattern) || [];\n      console.log(\"Extracted stock codes: \", matches)\n      return matches;\n    }\n  },\n\n  mounted() {\n    setInterval(() => {\n      this.currentTime = new Date().toLocaleTimeString();\n    }, 500);\n  }\n}\n</script>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAgB;;EAEpBA,KAAK,EAAC;AAAgB;;EAH/BC,GAAA;EAcOD,KAAK,EAAC;;mBAdb;;;;;;;uBAAAE,mBAAA,CAAAC,SAAA,SACEC,mBAAA,CAYM,OAZNC,UAYM,GAXJC,YAAA,CAAWC,kBAAA,GAACC,mBAAA,8BAAiC,EAC7CJ,mBAAA,CASM,OATNK,UASM,GARJH,YAAA,CAAwCI,qBAAA;IAA3BC,QAAQ,EAAEC,KAAA,CAAAC;EAAa,uCACpCP,YAAA,CAKYQ,oBAAA;IAVlBC,OAAA,EAAAC,QAAA,CAM0B,MAAoC,E,kBAAtDd,mBAAA,CAG0DC,SAAA,QATlEc,WAAA,CAMqDL,KAAA,CAAAM,QAAQ,EAN7D,CAMkCC,OAAO,EAAEC,KAAK;2BAAxCC,YAAA,CAG0DC,2BAAA;QAHFrB,GAAG,EAAEmB,KAAK;QAC/D,SAAO,EAAED,OAAO,CAACI,MAAM;QAAGC,IAAI,EAAEL,OAAO,CAACK,IAAI;QAAGC,MAAM,EAAEN,OAAO,CAACM,MAAM;QACrEC,SAAS,EAAEP,OAAO,CAACO,SAAS;QAAGC,QAAQ,EAAER,OAAO,CAACI,MAAM;QACvD,YAAU,EAAEJ,OAAO,CAACI,MAAM,GAAGX,KAAA,CAAAgB,UAAU,GAAGhB,KAAA,CAAAiB;;;IATrDC,CAAA;MAWMxB,YAAA,CAAuEyB,oBAAA;IAA3DC,aAAY,EAAEC,QAAA,CAAAC,WAAW;IAAGC,cAAa,EAAEF,QAAA,CAAAG;oEAGlBxB,KAAA,CAAAyB,eAAe,I,cAAxDnC,mBAAA,CAIM,OAJNoC,UAIM,I,kBAHJpC,mBAAA,CAEMC,SAAA,QAjBVc,WAAA,CAe+DL,KAAA,CAAA2B,WAAW,EAf1E,CAeyCC,UAAU,EAAEpB,KAAK;yBAAtDlB,mBAAA,CAEM;MAFDF,KAAK,EAAC,iBAAiB;MAA6CC,GAAG,EAAEmB,KAAK;MAAGqB,OAAK,EAAAC,MAAA,IAAET,QAAA,CAAAU,cAAc,CAACH,UAAU;QACpHpC,mBAAA,CAAuB,WAAAwC,gBAAA,CAAjBJ,UAAU,iB,iBAhBtBK,UAAA;sCAAArC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}