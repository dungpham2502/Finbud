{"ast":null,"code":"import dotenv from 'dotenv';\ndotenv.config();\n\n// src/services/gptServices.js\n/**\n * Fetches stock data from Alpha Vantage and then uses it to generate a contextual response from a GPT API.\n * @param {string} stockSymbol - The stock symbol to fetch data for and discuss.\n * @returns {Promise<string>} - A promise that resolves with the AI-generated text about the stock.\n */\nexport async function gptAPICall(stockSymbol) {\n  try {\n    // First, fetch stock data from Alpha Vantage\n    const alphavantageAPIKey = process.env.ALPHA_VANTAGE_API_KEY;\n    const stockUrl = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${stockSymbol}&apikey=${alphavantageAPIKey}`;\n    const stockResponse = await fetch(stockUrl);\n    const stockData = await stockResponse.json();\n\n    // Extract the relevant data to form a prompt for the GPT model\n    const price = stockData['Global Quote']['05. price'];\n    const prompt = `Generate a detailed analysis of ${stockSymbol} which currently trades at $${price}.`;\n\n    // Now, call the GPT API with the prompt\n    const OPENAI_API_KEY = process.env.OPENAI_API_KEY;\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${OPENAI_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: [{\n          role: \"user\",\n          content: prompt\n        }],\n        temperature: 0.7\n      })\n    });\n\n    // Return response content\n    const responseData = await response.json();\n    return responseData.choices[0]?.message?.content || \"\";\n  } catch (error) {\n    console.error('Error in fetching or generating response:', error);\n    throw error;\n  }\n}\n\n/**\n * Defines a term using openai.\n * @param {string} str - The term to define.\n * @returns {Promise<string>} - A promise that resolves with the AI-generated text about the term.\n */\nexport async function gptAPICallDefine(str) {\n  try {\n    const prompt = `Explain ${str} to me as if I'm 15.`;\n\n    // Now, call the GPT API with the prompt\n    const OPENAI_API_KEY = \"sk-proj-5eJ9i61oxJWJ6AwjiBSrT3BlbkFJEYUgszbRog0zRwRHm0cL\";\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${OPENAI_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: [{\n          role: \"user\",\n          content: prompt\n        }],\n        temperature: 0.7\n      })\n    });\n\n    // Return response content\n    const responseData = await response.json();\n    return responseData.choices[0]?.message?.content || \"\";\n  } catch (error) {\n    console.error('Error in fetching or generating response:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["dotenv","config","gptAPICall","stockSymbol","alphavantageAPIKey","process","env","ALPHA_VANTAGE_API_KEY","stockUrl","stockResponse","fetch","stockData","json","price","prompt","OPENAI_API_KEY","response","method","headers","body","JSON","stringify","model","messages","role","content","temperature","responseData","choices","message","error","console","gptAPICallDefine","str"],"sources":["/Users/buidinhtri/Desktop/FindBud/FinBud-AI-bot/src/services/gptServices.js"],"sourcesContent":["import dotenv from 'dotenv';\ndotenv.config();\n\n// src/services/gptServices.js\n/**\n * Fetches stock data from Alpha Vantage and then uses it to generate a contextual response from a GPT API.\n * @param {string} stockSymbol - The stock symbol to fetch data for and discuss.\n * @returns {Promise<string>} - A promise that resolves with the AI-generated text about the stock.\n */\nexport async function gptAPICall(stockSymbol) {\n    try {\n      // First, fetch stock data from Alpha Vantage\n      const alphavantageAPIKey = process.env.ALPHA_VANTAGE_API_KEY;\n      const stockUrl = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${stockSymbol}&apikey=${alphavantageAPIKey}`;\n      const stockResponse = await fetch(stockUrl);\n      const stockData = await stockResponse.json();\n  \n      // Extract the relevant data to form a prompt for the GPT model\n      const price = stockData['Global Quote']['05. price'];\n      const prompt = `Generate a detailed analysis of ${stockSymbol} which currently trades at $${price}.`;\n\n      // Now, call the GPT API with the prompt\n      const OPENAI_API_KEY = process.env.OPENAI_API_KEY;\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${OPENAI_API_KEY}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          messages: [{role: \"user\", content: prompt}],\n          temperature: 0.7\n        })\n      });\n\n      // Return response content\n      const responseData = await response.json();\n      return responseData.choices[0]?.message?.content || \"\";\n\n    } catch (error) {\n      console.error('Error in fetching or generating response:', error);\n      throw error;\n    }\n  }\n  \n\n/**\n * Defines a term using openai.\n * @param {string} str - The term to define.\n * @returns {Promise<string>} - A promise that resolves with the AI-generated text about the term.\n */\nexport async function gptAPICallDefine(str) {\n  try {\n    const prompt = `Explain ${str} to me as if I'm 15.`;\n\n    // Now, call the GPT API with the prompt\n    const OPENAI_API_KEY = \"sk-proj-5eJ9i61oxJWJ6AwjiBSrT3BlbkFJEYUgszbRog0zRwRHm0cL\";\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${OPENAI_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: [{role: \"user\", content: prompt}],\n        temperature: 0.7\n      })\n    });\n\n    // Return response content\n    const responseData = await response.json();\n    return responseData.choices[0]?.message?.content || \"\";\n\n  } catch (error) {\n    console.error('Error in fetching or generating response:', error);\n    throw error;\n  }\n}\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAC3BA,MAAM,CAACC,MAAM,CAAC,CAAC;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,UAAUA,CAACC,WAAW,EAAE;EAC1C,IAAI;IACF;IACA,MAAMC,kBAAkB,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB;IAC5D,MAAMC,QAAQ,GAAI,kEAAiEL,WAAY,WAAUC,kBAAmB,EAAC;IAC7H,MAAMK,aAAa,GAAG,MAAMC,KAAK,CAACF,QAAQ,CAAC;IAC3C,MAAMG,SAAS,GAAG,MAAMF,aAAa,CAACG,IAAI,CAAC,CAAC;;IAE5C;IACA,MAAMC,KAAK,GAAGF,SAAS,CAAC,cAAc,CAAC,CAAC,WAAW,CAAC;IACpD,MAAMG,MAAM,GAAI,mCAAkCX,WAAY,+BAA8BU,KAAM,GAAE;;IAEpG;IACA,MAAME,cAAc,GAAGV,OAAO,CAACC,GAAG,CAACS,cAAc;IACjD,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAAC,4CAA4C,EAAE;MACzEO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASH,cAAe;MAC9C,CAAC;MACDI,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAE,eAAe;QACtBC,QAAQ,EAAE,CAAC;UAACC,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAEX;QAAM,CAAC,CAAC;QAC3CY,WAAW,EAAE;MACf,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,MAAMC,YAAY,GAAG,MAAMX,QAAQ,CAACJ,IAAI,CAAC,CAAC;IAC1C,OAAOe,YAAY,CAACC,OAAO,CAAC,CAAC,CAAC,EAAEC,OAAO,EAAEJ,OAAO,IAAI,EAAE;EAExD,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IACjE,MAAMA,KAAK;EACb;AACF;;AAGF;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeE,gBAAgBA,CAACC,GAAG,EAAE;EAC1C,IAAI;IACF,MAAMnB,MAAM,GAAI,WAAUmB,GAAI,sBAAqB;;IAEnD;IACA,MAAMlB,cAAc,GAAG,0DAA0D;IACjF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAAC,4CAA4C,EAAE;MACzEO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASH,cAAe;MAC9C,CAAC;MACDI,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAE,eAAe;QACtBC,QAAQ,EAAE,CAAC;UAACC,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAEX;QAAM,CAAC,CAAC;QAC3CY,WAAW,EAAE;MACf,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,MAAMC,YAAY,GAAG,MAAMX,QAAQ,CAACJ,IAAI,CAAC,CAAC;IAC1C,OAAOe,YAAY,CAACC,OAAO,CAAC,CAAC,CAAC,EAAEC,OAAO,EAAEJ,OAAO,IAAI,EAAE;EAExD,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IACjE,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}