{"ast":null,"code":"// src/services/gptServices.js\n\n/**\n * Fetches stock data from Alpha Vantage and then uses it to generate a contextual response from a GPT API.\n * @param {string} stockSymbol - The stock symbol to fetch data for and discuss.\n * @returns {Promise<string>} - A promise that resolves with the AI-generated text about the stock.\n */\nexport async function gptAPICall(stockSymbol) {\n  try {\n    // First, fetch stock data from Alpha Vantage\n    const apiKey = 'LUVO8ME3IQXIVHMP';\n    const stockUrl = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${stockSymbol}&apikey=${apiKey}`;\n    const stockResponse = await fetch(stockUrl);\n    const stockData = await stockResponse.json();\n\n    // Extract the relevant data to form a prompt for the GPT model\n    const price = stockData['Global Quote']['05. price'];\n    const prompt = `Generate a detailed analysis of ${stockSymbol} which currently trades at $${price}.`;\n\n    // Now, call the GPT API with the prompt\n    const gptResponse = await fetch('https://api.gptservice.com/generate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer sk-proj-TUsn6fTQOQPRuclWxCixT3BlbkFJWhhUqhSjHFQFDVAvl8AK' // Ensure to replace with your GPT API key\n      },\n      body: JSON.stringify({\n        prompt: prompt,\n        max_tokens: 150\n      })\n    });\n    const gptData = await gptResponse.json();\n    return gptData.choices[0].message.content; // Assuming the GPT API returns choices in this structure\n  } catch (error) {\n    console.error('Error in fetching or generating response:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["gptAPICall","stockSymbol","apiKey","stockUrl","stockResponse","fetch","stockData","json","price","prompt","gptResponse","method","headers","body","JSON","stringify","max_tokens","gptData","choices","message","content","error","console"],"sources":["/Users/buidinhtri/Desktop/FindBud/FinBud-AI-bot/src/services/gptServices.js"],"sourcesContent":["// src/services/gptServices.js\n\n/**\n * Fetches stock data from Alpha Vantage and then uses it to generate a contextual response from a GPT API.\n * @param {string} stockSymbol - The stock symbol to fetch data for and discuss.\n * @returns {Promise<string>} - A promise that resolves with the AI-generated text about the stock.\n */\nexport async function gptAPICall(stockSymbol) {\n    try {\n      // First, fetch stock data from Alpha Vantage\n      const apiKey = 'LUVO8ME3IQXIVHMP';\n      const stockUrl = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${stockSymbol}&apikey=${apiKey}`;\n      const stockResponse = await fetch(stockUrl);\n      const stockData = await stockResponse.json();\n  \n      // Extract the relevant data to form a prompt for the GPT model\n      const price = stockData['Global Quote']['05. price'];\n      const prompt = `Generate a detailed analysis of ${stockSymbol} which currently trades at $${price}.`;\n  \n      // Now, call the GPT API with the prompt\n      const gptResponse = await fetch('https://api.gptservice.com/generate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer sk-proj-TUsn6fTQOQPRuclWxCixT3BlbkFJWhhUqhSjHFQFDVAvl8AK' // Ensure to replace with your GPT API key\n        },\n        body: JSON.stringify({ prompt: prompt, max_tokens: 150 })\n      });\n  \n      const gptData = await gptResponse.json();\n      return gptData.choices[0].message.content; // Assuming the GPT API returns choices in this structure\n    } catch (error) {\n      console.error('Error in fetching or generating response:', error);\n      throw error;\n    }\n  }\n  "],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeA,UAAUA,CAACC,WAAW,EAAE;EAC1C,IAAI;IACF;IACA,MAAMC,MAAM,GAAG,kBAAkB;IACjC,MAAMC,QAAQ,GAAI,kEAAiEF,WAAY,WAAUC,MAAO,EAAC;IACjH,MAAME,aAAa,GAAG,MAAMC,KAAK,CAACF,QAAQ,CAAC;IAC3C,MAAMG,SAAS,GAAG,MAAMF,aAAa,CAACG,IAAI,CAAC,CAAC;;IAE5C;IACA,MAAMC,KAAK,GAAGF,SAAS,CAAC,cAAc,CAAC,CAAC,WAAW,CAAC;IACpD,MAAMG,MAAM,GAAI,mCAAkCR,WAAY,+BAA8BO,KAAM,GAAE;;IAEpG;IACA,MAAME,WAAW,GAAG,MAAML,KAAK,CAAC,qCAAqC,EAAE;MACrEM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,iEAAiE,CAAC;MACrF,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEN,MAAM,EAAEA,MAAM;QAAEO,UAAU,EAAE;MAAI,CAAC;IAC1D,CAAC,CAAC;IAEF,MAAMC,OAAO,GAAG,MAAMP,WAAW,CAACH,IAAI,CAAC,CAAC;IACxC,OAAOU,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACC,OAAO,CAAC,CAAC;EAC7C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IACjE,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}