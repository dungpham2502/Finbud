{"ast":null,"code":"// src/services/gptServices.js\nimport fetch from 'node-fetch'; // Ensure you have node-fetch installed for server-side requests\nimport 'dotenv/config'; // Load environment variables\n\n/**\n * Fetches stock data from Alpha Vantage and then uses it to generate a contextual response from a GPT API.\n * @param {string} stockSymbol - The stock symbol to fetch data for and discuss.\n * @returns {Promise<string>} - A promise that resolves with the AI-generated text about the stock.\n */\nexport async function gptAPICall(stockSymbol) {\n  try {\n    // First, fetch stock data from Alpha Vantage\n    const alphaVantageApiKey = process.env.ALPHA_VANTAGE_API_KEY;\n    const stockUrl = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${stockSymbol}&apikey=${alphaVantageApiKey}`;\n    const stockResponse = await fetch(stockUrl);\n    const stockData = await stockResponse.json();\n\n    // Extract the relevant data to form a prompt for the GPT model\n    const price = stockData['Global Quote']['05. price'];\n    const prompt = `Generate a detailed analysis of ${stockSymbol} which currently trades at $${price}.`;\n\n    // Now, call the GPT API with the prompt\n    const gptApiKey = process.env.GPT_API_KEY;\n    const gptResponse = await fetch('https://api.gptservice.com/generate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${gptApiKey}`\n      },\n      body: JSON.stringify({\n        prompt: prompt,\n        max_tokens: 150\n      })\n    });\n    const gptData = await gptResponse.json();\n    return gptData.choices[0].message.content; // Assuming the GPT API returns choices in this structure\n  } catch (error) {\n    console.error('Error in fetching or generating response:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["fetch","gptAPICall","stockSymbol","alphaVantageApiKey","process","env","ALPHA_VANTAGE_API_KEY","stockUrl","stockResponse","stockData","json","price","prompt","gptApiKey","GPT_API_KEY","gptResponse","method","headers","body","JSON","stringify","max_tokens","gptData","choices","message","content","error","console"],"sources":["/Users/buidinhtri/Desktop/FindBud/FinBud-AI-bot/src/services/gptServices.js"],"sourcesContent":["// src/services/gptServices.js\nimport fetch from 'node-fetch'; // Ensure you have node-fetch installed for server-side requests\nimport 'dotenv/config'; // Load environment variables\n\n/**\n * Fetches stock data from Alpha Vantage and then uses it to generate a contextual response from a GPT API.\n * @param {string} stockSymbol - The stock symbol to fetch data for and discuss.\n * @returns {Promise<string>} - A promise that resolves with the AI-generated text about the stock.\n */\nexport async function gptAPICall(stockSymbol) {\n  try {\n    // First, fetch stock data from Alpha Vantage\n    const alphaVantageApiKey = process.env.ALPHA_VANTAGE_API_KEY;\n    const stockUrl = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${stockSymbol}&apikey=${alphaVantageApiKey}`;\n    const stockResponse = await fetch(stockUrl);\n    const stockData = await stockResponse.json();\n\n    // Extract the relevant data to form a prompt for the GPT model\n    const price = stockData['Global Quote']['05. price'];\n    const prompt = `Generate a detailed analysis of ${stockSymbol} which currently trades at $${price}.`;\n\n    // Now, call the GPT API with the prompt\n    const gptApiKey = process.env.GPT_API_KEY;\n    const gptResponse = await fetch('https://api.gptservice.com/generate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${gptApiKey}`\n      },\n      body: JSON.stringify({ prompt: prompt, max_tokens: 150 })\n    });\n\n    const gptData = await gptResponse.json();\n    return gptData.choices[0].message.content; // Assuming the GPT API returns choices in this structure\n  } catch (error) {\n    console.error('Error in fetching or generating response:', error);\n    throw error;\n  }\n}\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,YAAY,CAAC,CAAC;AAChC,OAAO,eAAe,CAAC,CAAC;;AAExB;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,UAAUA,CAACC,WAAW,EAAE;EAC5C,IAAI;IACF;IACA,MAAMC,kBAAkB,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB;IAC5D,MAAMC,QAAQ,GAAI,kEAAiEL,WAAY,WAAUC,kBAAmB,EAAC;IAC7H,MAAMK,aAAa,GAAG,MAAMR,KAAK,CAACO,QAAQ,CAAC;IAC3C,MAAME,SAAS,GAAG,MAAMD,aAAa,CAACE,IAAI,CAAC,CAAC;;IAE5C;IACA,MAAMC,KAAK,GAAGF,SAAS,CAAC,cAAc,CAAC,CAAC,WAAW,CAAC;IACpD,MAAMG,MAAM,GAAI,mCAAkCV,WAAY,+BAA8BS,KAAM,GAAE;;IAEpG;IACA,MAAME,SAAS,GAAGT,OAAO,CAACC,GAAG,CAACS,WAAW;IACzC,MAAMC,WAAW,GAAG,MAAMf,KAAK,CAAC,qCAAqC,EAAE;MACrEgB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASJ,SAAU;MACvC,CAAC;MACDK,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,MAAM,EAAEA,MAAM;QAAES,UAAU,EAAE;MAAI,CAAC;IAC1D,CAAC,CAAC;IAEF,MAAMC,OAAO,GAAG,MAAMP,WAAW,CAACL,IAAI,CAAC,CAAC;IACxC,OAAOY,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACC,OAAO,CAAC,CAAC;EAC7C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IACjE,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}