{"ast":null,"code":"import dotenv from 'dotenv';\ndotenv.config();\nconst ALPHAVANTAGE_API_KEY = process.env.ALPHA_VANTAGE_API_KEY;\nconst OPENAI_API_KEY = process.env.OPENAI_API_KEY;\n\n/**\n * Fetches stock data from Alpha Vantage and then uses it to generate a contextual response from a GPT API.\n * @param {string} stockSymbol - The stock symbol to fetch data for and discuss.\n * @returns {Promise<string>} - A promise that resolves with the AI-generated text about the stock.\n */\nexport async function gptAPICall(stockSymbol) {\n  try {\n    const stockUrl = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${stockSymbol}&apikey=${ALPHAVANTAGE_API_KEY}`;\n    const stockResponse = await fetch(stockUrl);\n    const stockData = await stockResponse.json();\n    const price = stockData['Global Quote']['05. price'];\n    const prompt = `Generate a detailed analysis of ${stockSymbol} which currently trades at $${price}.`;\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${OPENAI_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: [{\n          role: \"user\",\n          content: prompt\n        }],\n        temperature: 0.7\n      })\n    });\n    const responseData = await response.json();\n    return responseData.choices[0]?.message?.content || \"\";\n  } catch (error) {\n    console.error('Error in fetching or generating response:', error);\n    throw error;\n  }\n}\n\n/**\n * Defines a term using openai.\n * @param {string} str - The term to define.\n * @returns {Promise<string>} - A promise that resolves with the AI-generated text about the term.\n */\nexport async function gptAPICallDefine(str) {\n  try {\n    const prompt = `Explain ${str} to me as if I'm 15.`;\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${OPENAI_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: [{\n          role: \"user\",\n          content: prompt\n        }],\n        temperature: 0.7\n      })\n    });\n    const responseData = await response.json();\n    return responseData.choices[0]?.message?.content || \"\";\n  } catch (error) {\n    console.error('Error in fetching or generating response:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["dotenv","config","ALPHAVANTAGE_API_KEY","process","env","ALPHA_VANTAGE_API_KEY","OPENAI_API_KEY","gptAPICall","stockSymbol","stockUrl","stockResponse","fetch","stockData","json","price","prompt","response","method","headers","body","JSON","stringify","model","messages","role","content","temperature","responseData","choices","message","error","console","gptAPICallDefine","str"],"sources":["/Users/buidinhtri/Desktop/FindBud/FinBud-AI-bot/src/services/gptServices.js"],"sourcesContent":["import dotenv from 'dotenv';\ndotenv.config();\n\nconst ALPHAVANTAGE_API_KEY = process.env.ALPHA_VANTAGE_API_KEY;\nconst OPENAI_API_KEY = process.env.OPENAI_API_KEY;\n\n/**\n * Fetches stock data from Alpha Vantage and then uses it to generate a contextual response from a GPT API.\n * @param {string} stockSymbol - The stock symbol to fetch data for and discuss.\n * @returns {Promise<string>} - A promise that resolves with the AI-generated text about the stock.\n */\nexport async function gptAPICall(stockSymbol) {\n    try {\n        const stockUrl = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${stockSymbol}&apikey=${ALPHAVANTAGE_API_KEY}`;\n        const stockResponse = await fetch(stockUrl);\n        const stockData = await stockResponse.json();\n  \n        const price = stockData['Global Quote']['05. price'];\n        const prompt = `Generate a detailed analysis of ${stockSymbol} which currently trades at $${price}.`;\n\n        const response = await fetch('https://api.openai.com/v1/chat/completions', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${OPENAI_API_KEY}`\n            },\n            body: JSON.stringify({\n                model: \"gpt-3.5-turbo\",\n                messages: [{ role: \"user\", content: prompt }],\n                temperature: 0.7\n            })\n        });\n\n        const responseData = await response.json();\n        return responseData.choices[0]?.message?.content || \"\";\n    } catch (error) {\n        console.error('Error in fetching or generating response:', error);\n        throw error;\n    }\n}\n\n/**\n * Defines a term using openai.\n * @param {string} str - The term to define.\n * @returns {Promise<string>} - A promise that resolves with the AI-generated text about the term.\n */\nexport async function gptAPICallDefine(str) {\n    try {\n        const prompt = `Explain ${str} to me as if I'm 15.`;\n\n        const response = await fetch('https://api.openai.com/v1/chat/completions', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${OPENAI_API_KEY}`\n            },\n            body: JSON.stringify({\n                model: \"gpt-3.5-turbo\",\n                messages: [{ role: \"user\", content: prompt }],\n                temperature: 0.7\n            })\n        });\n\n        const responseData = await response.json();\n        return responseData.choices[0]?.message?.content || \"\";\n    } catch (error) {\n        console.error('Error in fetching or generating response:', error);\n        throw error;\n    }\n}\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAC3BA,MAAM,CAACC,MAAM,CAAC,CAAC;AAEf,MAAMC,oBAAoB,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB;AAC9D,MAAMC,cAAc,GAAGH,OAAO,CAACC,GAAG,CAACE,cAAc;;AAEjD;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,UAAUA,CAACC,WAAW,EAAE;EAC1C,IAAI;IACA,MAAMC,QAAQ,GAAI,kEAAiED,WAAY,WAAUN,oBAAqB,EAAC;IAC/H,MAAMQ,aAAa,GAAG,MAAMC,KAAK,CAACF,QAAQ,CAAC;IAC3C,MAAMG,SAAS,GAAG,MAAMF,aAAa,CAACG,IAAI,CAAC,CAAC;IAE5C,MAAMC,KAAK,GAAGF,SAAS,CAAC,cAAc,CAAC,CAAC,WAAW,CAAC;IACpD,MAAMG,MAAM,GAAI,mCAAkCP,WAAY,+BAA8BM,KAAM,GAAE;IAEpG,MAAME,QAAQ,GAAG,MAAML,KAAK,CAAC,4CAA4C,EAAE;MACvEM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASZ,cAAe;MAC9C,CAAC;MACDa,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBC,KAAK,EAAE,eAAe;QACtBC,QAAQ,EAAE,CAAC;UAAEC,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAEV;QAAO,CAAC,CAAC;QAC7CW,WAAW,EAAE;MACjB,CAAC;IACL,CAAC,CAAC;IAEF,MAAMC,YAAY,GAAG,MAAMX,QAAQ,CAACH,IAAI,CAAC,CAAC;IAC1C,OAAOc,YAAY,CAACC,OAAO,CAAC,CAAC,CAAC,EAAEC,OAAO,EAAEJ,OAAO,IAAI,EAAE;EAC1D,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IACjE,MAAMA,KAAK;EACf;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeE,gBAAgBA,CAACC,GAAG,EAAE;EACxC,IAAI;IACA,MAAMlB,MAAM,GAAI,WAAUkB,GAAI,sBAAqB;IAEnD,MAAMjB,QAAQ,GAAG,MAAML,KAAK,CAAC,4CAA4C,EAAE;MACvEM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASZ,cAAe;MAC9C,CAAC;MACDa,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBC,KAAK,EAAE,eAAe;QACtBC,QAAQ,EAAE,CAAC;UAAEC,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAEV;QAAO,CAAC,CAAC;QAC7CW,WAAW,EAAE;MACjB,CAAC;IACL,CAAC,CAAC;IAEF,MAAMC,YAAY,GAAG,MAAMX,QAAQ,CAACH,IAAI,CAAC,CAAC;IAC1C,OAAOc,YAAY,CAACC,OAAO,CAAC,CAAC,CAAC,EAAEC,OAAO,EAAEJ,OAAO,IAAI,EAAE;EAC1D,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IACjE,MAAMA,KAAK;EACf;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}