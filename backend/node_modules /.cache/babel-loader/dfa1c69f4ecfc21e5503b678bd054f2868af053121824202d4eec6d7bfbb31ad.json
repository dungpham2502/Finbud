{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, withCtx as _withCtx, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-96f3dc52\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"home-container\"\n};\nconst _hoisted_2 = {\n  class: \"chat-container\"\n};\nexport function render(_ctx, _cache) {\n  const _component_SideBar = _resolveComponent(\"SideBar\");\n  const _component_ChatHeader = _resolveComponent(\"ChatHeader\");\n  const _component_MessageComponent = _resolveComponent(\"MessageComponent\");\n  const _component_ChatFrame = _resolveComponent(\"ChatFrame\");\n  const _component_UserInput = _resolveComponent(\"UserInput\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_SideBar, {\n    threads: _ctx.threads,\n    onAddThread: _ctx.addThread,\n    onEditThread: _ctx.editThread,\n    onSaveThreadName: _ctx.saveThreadName,\n    onCancelEdit: _ctx.cancelEdit,\n    onSelectThread: _ctx.selectThread\n  }, null, 8 /* PROPS */, [\"threads\", \"onAddThread\", \"onEditThread\", \"onSaveThreadName\", \"onCancelEdit\", \"onSelectThread\"]), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_ChatHeader, {\n    threadId: _ctx.currentThread.id\n  }, null, 8 /* PROPS */, [\"threadId\"]), _createVNode(_component_ChatFrame, null, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.messages, (message, index) => {\n      return _openBlock(), _createBlock(_component_MessageComponent, {\n        key: index,\n        \"is-user\": message.isUser,\n        text: message.text,\n        typing: message.typing,\n        timestamp: message.timestamp,\n        username: message.isUser ? 'Tri Bui' : 'FinBud Bot',\n        \"avatar-src\": message.isUser ? _ctx.userAvatar : _ctx.botAvatar\n      }, null, 8 /* PROPS */, [\"is-user\", \"text\", \"typing\", \"timestamp\", \"username\", \"avatar-src\"]);\n    }), 128 /* KEYED_FRAGMENT */))]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_UserInput, {\n    onSendMessage: _ctx.sendMessage,\n    onClearMessage: _ctx.clearMessage\n  }, null, 8 /* PROPS */, [\"onSendMessage\", \"onClearMessage\"])])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_SideBar","threads","_ctx","onAddThread","addThread","onEditThread","editThread","onSaveThreadName","saveThreadName","onCancelEdit","cancelEdit","onSelectThread","selectThread","_createElementVNode","_hoisted_2","_component_ChatHeader","threadId","currentThread","id","_component_ChatFrame","default","_withCtx","_Fragment","_renderList","messages","message","index","_createBlock","_component_MessageComponent","key","isUser","text","typing","timestamp","username","userAvatar","botAvatar","_","_component_UserInput","onSendMessage","sendMessage","onClearMessage","clearMessage"],"sources":["/Users/buidinhtri/Desktop/FindBud/FinBud-AI-bot/src/views/ChatView.vue"],"sourcesContent":["<template>\n  <div class=\"home-container\">\n    <SideBar\n      :threads=\"threads\"\n      @add-thread=\"addThread\"\n      @edit-thread=\"editThread\"\n      @save-thread-name=\"saveThreadName\"\n      @cancel-edit=\"cancelEdit\"\n      @select-thread=\"selectThread\"\n    />\n    <div class=\"chat-container\">\n      <ChatHeader :threadId=\"currentThread.id\" />\n      <ChatFrame>\n        <MessageComponent\n          v-for=\"(message, index) in messages\"\n          :key=\"index\"\n          :is-user=\"message.isUser\"\n          :text=\"message.text\"\n          :typing=\"message.typing\"\n          :timestamp=\"message.timestamp\"\n          :username=\"message.isUser ? 'Tri Bui' : 'FinBud Bot'\"\n          :avatar-src=\"message.isUser ? userAvatar : botAvatar\"\n        />\n      </ChatFrame>\n      <UserInput @send-message=\"sendMessage\" @clear-message=\"clearMessage\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport ChatHeader from '../components/ChatHeader.vue';\nimport ChatFrame from '../components/ChatFrame.vue';\nimport MessageComponent from '../components/MessageComponent.vue';\nimport UserInput from '../components/UserInput.vue';\nimport { fetchStockPrice } from '@/services/stockServices';\nimport SideBar from '../components/SideBar.vue';\n\nexport default {\n  name: 'ChatView',\n  props: ['threadId'],\n  components: {\n    ChatHeader,\n    ChatFrame,\n    MessageComponent,\n    UserInput,\n    SideBar\n  },\n  data() {\n    return {\n      newMessage: '',\n      messages: [],\n      userAvatar: require('@/assets/tri.jpeg'),\n      botAvatar: require('@/assets/bot.png'),\n      currentThread: {},\n      threads: []\n    };\n  },\n  watch: {\n    threadId: {\n      immediate: true,\n      handler(newThreadId) {\n        console.log('Received new thread ID:', newThreadId);\n        if (newThreadId != null) {\n          this.updateCurrentThread(newThreadId);\n        }\n      }\n    },\n  },\n  methods: {\n    clearMessage() {\n      this.newMessage = '';\n    },\n    updateCurrentThread(newThreadId) {\n      console.log(\"Update current thread function triggered: \", newThreadId);\n      const thread = this.threads.find(thread => thread.id.toString() === newThreadId);\n      console.log(thread);\n      if (thread) {\n        this.currentThread = thread;\n        this.messages = thread.messages || [];\n      } else {\n        console.error('Thread with ID', newThreadId, 'not found');\n        this.currentThread = {};\n        this.messages = [];\n      }\n      console.log(\"Current thread: \", this.currentThread);\n    },\n    addThread(newThread) {\n      newThread.id = this.threads.length + 1;\n      this.threads.push(newThread);\n      console.log(\"Added new thread: \", newThread);\n    },\n    editThread(index) {\n      this.threads[index].editing = true;\n    },\n    saveThreadName({ newName, index }) {\n      this.threads[index].name = newName;\n      this.threads[index].editing = false;\n    },\n    cancelEdit(index) {\n      this.threads[index].editing = false;\n    },\n    selectThread(index) {\n      this.updateCurrentThread(this.threads[index].id.toString());\n    },\n    async sendMessage(newMessage) {\n      console.log(\"start sending message in send message..\");\n\n      this.messages.push({\n        text: newMessage.trim(),\n        isUser: true,\n        typing: true,\n        timestamp: new Date().toLocaleTimeString()\n      });\n\n      this.newMessage = '';\n\n      const stockCode = this.extractStockCode(this.messages[this.messages.length - 1].text);\n      if (stockCode.length > 0) {\n        try {\n          const price = await fetchStockPrice(stockCode[0]);\n          const timeStamp = new Date().toLocaleTimeString();\n          console.log(\"This is time stamp when asking about stock price: \", timeStamp);\n          let responseText = `The current price of ${stockCode[0]} stock is $${price}, as of ${timeStamp}.`;\n\n          this.addTypingResponse(responseText, false);\n\n          const response = await axios.post('/api/analyze-stock', { stockSymbol: stockCode[0] });\n          this.addTypingResponse(response.data.analysis, false);\n        } catch (error) {\n          console.error('Error:', error);\n          this.messages.push({ text: `Error fetching data for ${stockCode}.`, isUser: false, timestamp: new Date().toLocaleTimeString() });\n        }\n      } else {\n        const userMessage = this.messages[this.messages.length - 1].text;\n        setTimeout(async () => {\n          if (userMessage.toLowerCase().includes(\"define\")) {\n            const term = userMessage.substring(userMessage.toLowerCase().indexOf(\"define\") + \"define\".length).trim();\n            try {\n              const response = await axios.post('/api/define-term', { term });\n              this.addTypingResponse(response.data.definition, false);\n            } catch (error) {\n              console.error('Error:', error);\n              this.messages.push({ text: `Error defining term.`, isUser: false, timestamp: new Date().toLocaleTimeString() });\n            }\n          } else if (userMessage.toLowerCase().includes(\"ipo\")) {\n            this.addTypingResponse(\"IPO stands for Initial Public Offering. It's when a company sells its shares to the public for the first time. Think of it like when a company decides to let anyone buy a small piece of it.\", false);\n          } else if (userMessage.toLowerCase().includes(\"balance sheet\")) {\n            this.addTypingResponse(\"A balance sheet is like a financial snapshot of a company at a specific point in time. It shows what the company owns (assets), what it owes (liabilities), and the value left over for the owners (equity). Think of it as a list that helps you understand a company's financial health.\", false);\n          } else if (userMessage.toLowerCase().includes(\"bond\")) {\n            this.addTypingResponse(\"Bonds are loans from investors to companies or governments. Investors receive regular interest payments and get their money back when the bond matures. Think of it like lending money to a friend with a promise. When you give them the money, they agree to pay you back a little extra each month (interest) and return the full amount you lent them after a certain time (maturity).\", false);\n          } else {\n            const response = app.post('/api/norm-ans'\n           this.addTypingResponse()\n          }\n        }, 2000);\n      }\n    },\n    addTypingResponse(text, isUser) {\n      const typingMessage = {\n        text: text,\n        isUser: isUser,\n        typing: true,\n        timestamp: new Date().toLocaleTimeString(),\n        username: isUser ? 'You' : 'FinBud Bot'\n      };\n\n      this.messages.push(typingMessage);\n      setTimeout(() => {\n        typingMessage.text = text;\n        typingMessage.typing = false;\n        this.$forceUpdate();\n      }, 2000);\n    },\n    extractStockCode(message) {\n      const pattern = /\\b[A-Z]{3,5}\\b/g;\n      const matches = message.match(pattern) || [];\n      console.log(\"Ham extract: \", matches);\n      return matches;\n    },\n    extractSharesAndCode(message) {\n      // Regex to find stock codes: assumes codes are upper-case letters optionally followed by numbers\n      const stockCodePattern = /\\b[A-Z]{1,5}\\b/g;\n      // Regex to find numbers: looks for numbers that may have commas and come after the word 'shares'\n      const sharesPattern = /(\\b\\d{1,3}(,\\d{3})*\\b)(?=\\s*shares)/gi;\n\n      const stockCodes = message.match(stockCodePattern);\n      const sharesMatches = message.match(sharesPattern);\n\n      let shares;\n      if (sharesMatches && sharesMatches.length > 0) {\n        // Remove commas and convert to integer\n        shares = parseInt(sharesMatches[0].replace(/,/g, ''), 10);\n      }\n\n      // We return the first stock code found and the number of shares, if any\n      return {\n        stockCode: stockCodes ? stockCodes[0] : null, // Just taking the first match for simplicity\n        shares: shares || null\n      };\n    },\n    async calculateTotalValue(stockCode, shares) {\n      if (!stockCode || !shares) {\n        throw new Error(\"Stock code or number of shares missing.\");\n      }\n      try {\n        const price = await fetchStockPrice(stockCode);\n        // Convert price to a number and calculate total value\n        const totalValue = (Number(price) * shares).toFixed(2);\n        return totalValue;\n      } catch (error) {\n        console.error('Error calculating total value:', error);\n        throw error; // Re-throw the error to handle it in the calling function\n      }\n    },\n    async fakeResponse(message) {\n      // Simulate fake response from the backend API\n      return \"This is a fake response to the message: \" + message;\n    },\n    mounted() {\n      // Update the current time every second\n      setInterval(() => {\n        this.currentTime = new Date().toLocaleTimeString();\n      }, 500);\n    }\n  }\n};\n</script>\n\n\n<style scoped>\n.home-container {\n  display: flex; /* Changes the flex-direction to row by default */\n  width: 100%; /* Full width of the viewport */\n  height: 100vh; /* Full height of the viewport */\n}\n\n.chat-container {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAgB;;EASpBA,KAAK,EAAC;AAAgB;;;;;;;uBAT7BC,mBAAA,CAyBM,OAzBNC,UAyBM,GAxBJC,YAAA,CAOEC,kBAAA;IANCC,OAAO,EAAEC,IAAA,CAAAD,OAAO;IAChBE,WAAU,EAAED,IAAA,CAAAE,SAAS;IACrBC,YAAW,EAAEH,IAAA,CAAAI,UAAU;IACvBC,gBAAgB,EAAEL,IAAA,CAAAM,cAAc;IAChCC,YAAW,EAAEP,IAAA,CAAAQ,UAAU;IACvBC,cAAa,EAAET,IAAA,CAAAU;6HAElBC,mBAAA,CAeM,OAfNC,UAeM,GAdJf,YAAA,CAA2CgB,qBAAA;IAA9BC,QAAQ,EAAEd,IAAA,CAAAe,aAAa,CAACC;yCACrCnB,YAAA,CAWYoB,oBAAA;IAvBlBC,OAAA,EAAAC,QAAA,CAcU,MAAoC,E,kBADtCxB,mBAAA,CASEyB,SAAA,QAtBVC,WAAA,CAcqCrB,IAAA,CAAAsB,QAAQ,EAd7C,CAckBC,OAAO,EAAEC,KAAK;2BADxBC,YAAA,CASEC,2BAAA;QAPCC,GAAG,EAAEH,KAAK;QACV,SAAO,EAAED,OAAO,CAACK,MAAM;QACvBC,IAAI,EAAEN,OAAO,CAACM,IAAI;QAClBC,MAAM,EAAEP,OAAO,CAACO,MAAM;QACtBC,SAAS,EAAER,OAAO,CAACQ,SAAS;QAC5BC,QAAQ,EAAET,OAAO,CAACK,MAAM;QACxB,YAAU,EAAEL,OAAO,CAACK,MAAM,GAAG5B,IAAA,CAAAiC,UAAU,GAAGjC,IAAA,CAAAkC;;;IArBrDC,CAAA;MAwBMtC,YAAA,CAAuEuC,oBAAA;IAA3DC,aAAY,EAAErC,IAAA,CAAAsC,WAAW;IAAGC,cAAa,EAAEvC,IAAA,CAAAwC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}